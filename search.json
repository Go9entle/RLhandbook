[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "强化学习基础",
    "section": "",
    "text": "在马尔可夫过程的基础上加入奖励函数r和折扣因子\\gamma,就可以得到马尔可夫奖励过程（Markov Reward Process, MRP）。一个马尔可夫奖励过程由\\langle S,\\mathcal{P},r,\\gamma\\rangle构成。\n\n\n在一个MRP中，从第t时刻状态S_t开始，直到终止状态时，所有奖励的衰减之和称为回报G_t（Return），公式如下：\n\nG_t=R_t+\\gamma R_{t+1}+\\gamma^2 R_{t+2}+\\dots=\\sum_{k=0}^{\\infty}\\gamma^k R_{t+k},\n 其中，R_t表示在时刻t获得的奖励。\n\n\n\n在MRP中，一个状态的期望回报（即从这个状态出发的未来累积奖励的期望）被称为这个状态的价值（Value）。所有状态的价值就组成了价值函数（Value function），价值函数的输入为某个状态，输出为这个状态的价值。我们将价值函数写成\n\n\\begin{aligned}\nV(s)&=\\mathbb{E}\\left[G_t\\mid S_t=s\\right]\\\\\n&= \\mathbb{E}\\left[ R_t+\\gamma R_{t+1}+\\gamma^2 R_{t+2} +\\dots\\mid S_t=s\\right]\\\\\n&=\\mathbb{E}\\left[ R_t+\\gamma (R_{t+1}+\\gamma R_{t+2} +\\dots)\\mid S_t=s\\right]\\\\\n&=\\mathbb{E}\\left[ R_t+\\gamma G_{t+1}\\mid S_t=s \\right]\\\\\n&=\\mathbb{E}\\left[ R_t+\\gamma V(S_{t+1})\\mid S_t=s \\right]\n\\end{aligned}\n\n在上式的最后一个等号中，一方面，即时奖励的期望正是奖励函数的输出，即\\mathbb{E}\\left[ R_t\\mid S_t=s \\right]=r(s);另一方面，等式中剩余部分\\mathbb{E}\\left[\\gamma V(S_{t+1})\\mid S_t=s\\right]可以根据从状态s出发的转移概率得到，即\n\nV(s)=r(s)+\\gamma \\sum_{s'\\in \\mathcal{S}}p(s'\\mid s)V(s')\n\n上式就是MRP中非常有名的贝尔曼方程（Bellman equation），对每一个状态都成立。若通过矩阵运算可以得到以下解析解：\n\n\\begin{aligned}\n\\mathcal{V}&=\\mathcal{R}+\\gamma\\mathcal{P}\\mathcal{V}\\\\\n\\mathcal{V}&=(I-\\gamma\\mathcal{P})^{-1}\\mathcal{R}\n\\end{aligned}\n 其中\\mathcal{V,R,P}均为向量或矩阵。以上解析解的计算复杂度是O(n^3),其中n是状态个数，因此这种方法只适用于很小的MRP。求解较大规模的MRP奖励过程中的价值函数时，可以使用动态规划、蒙特卡洛、时序差分，这些方法将在之后的章节介绍。\n接下来编写代码来实现求解价值函数的解析解方法，并据此计算该马尔可夫奖励过程中所有状态的价值。\n\ndef compute(P, rewards, gamma, states_num):\n    ''' 利用贝尔曼方程的矩阵形式计算解析解,states_num是MRP的状态数 '''\n    rewards = np.array(rewards).reshape((-1, 1))  #将rewards写成列向量形式\n    value = np.dot(np.linalg.inv(np.eye(states_num, states_num) - gamma * P),\n                   rewards)\n    return value\n\n\n\n\n\n如果有一个外界的“刺激”来共同改变这个随机过程，就有了马尔可夫决策过程（MDP）。我们将这个来自外界的刺激称为智能体（Agent）的动作，在MRP的基础上加入动作，就得到了MDP。MDP有元组\\langle \\mathcal{S,A,P},r,\\gamma\\rangle构成。\n\n\n智能体的策略（Policy）通常用字母\\pi表示。策略\\pi(a|s)=P(A_t=a|S_t=s)是一个函数，表示在输入状态s情况下采取动作a的概率。当一个策略是确定性策略（Deterministic policy）时，它在每个状态只输出一个确定性的动作，即只有该动作的概率为1,其他动作的概率为0; 当一个策略是随机性策略（Stochastic policy）时，它在每个状态时输出的是关于动作的概率分布，然后根据该分布进行采样就可以得到一个动作。\n在 MDP 中，由于马尔可夫性质的存在，策略只需要与当前状态有关，不需要考虑历史状态。回顾一下在 MRP 中的价值函数，在 MDP 中也同样可以定义类似的价值函数。但此时的价值函数与策略有关，这意为着对于两个不同的策略来说，它们在同一个状态下的价值也很可能是不同的。这很好理解，因为不同的策略会采取不同的动作，从而之后会遇到不同的状态，以及获得不同的奖励，所以它们的累积奖励的期望也就不同，即状态价值不同。\n\n\n\n我们用V^{\\pi}(s)表示在MDP中基于策略\\pi的状态价值函数（State-value function），定义在从状态s出发遵循策略\\pi能获得的期望回报，数学表达为\n\nV^{\\pi}(s)=\\mathbb{E}_{\\pi}[G_t|S_t=s]\n\n\n\n\n不同于MRP，MDP中由于动作的存在我们定义一个动作价值函数（Action-value function）。我们用Q^{\\pi}(s,a)表示在MDP遵循策略\\pi时，对当前状态s执行动作a得到的期望回报：\n\nQ^{\\pi}(s,a)=\\mathbb{E}_{\\pi}[G_t|S_t=s,A_t=a]\n\n状态价值函数和动作价值函数之间的关系：\n在使用策略\\pi时，状态s的价值等于在该状态下基于策略\\pi采取所有动作的概率与相应价值相乘再求和的结果：\n\nV^{\\pi}(s)=\\sum_{a\\in\\mathcal{A}}\\pi(a|s)Q^{\\pi}(s,a)\n\n在使用策略\\pi时，状态s下采取动作a的价值等于即时奖励加上经过衰减后的所有可能的下一个状态转移概率与相应价值的乘积：\n\nQ^{\\pi}(s,a)=r(s,a)+\\gamma\\sum_{s'\\in\\mathcal{S}}P(s'|s,a)V^{\\pi}(s')\n\n\n\n\n在贝尔曼方程中加上期望二字是为了与接下来的贝尔曼最优方程进行区分。我们通过加单推到就可以分别得到两个价值函数的贝尔曼期望方程（Bellman Expect Equation）：\n\n\\begin{aligned}\nV^{\\pi}(s)&=\\mathbb{E}_{\\pi}\\left[R_t+\\gamma V^{\\pi}(S_{t+1})|S_t=s\\right]\\\\\n&=\\sum_{a\\in\\mathcal{A}}\\pi(a|s)\\left( r(s,a)+\\gamma\\sum_{s'\\in\\mathcal{S}}p(s'|s,a)V^{\\pi}(s')\\right)\\\\\n\\\\\nQ^{\\pi}(s,a)&=\\mathbb{E}_{\\pi}\\left[R_t+\\gamma Q^{\\pi}(S_{t+1},A_{t+1}|S_t=s, A_t=a)\\right]\\\\\n&=r(s,a)+\\gamma\\sum_{s'\\in\\mathcal{S}}p(s'|s,a)\\sum_{a'\\in\\mathcal{A}}\\pi(a'|s')Q^{\\pi}(s',a)\n\\end{aligned}\n\n价值函数和贝尔曼方程是强化学习非常重要的组成部分，之后的一些强化学习算法都是据此推导出来的。\n现在我们考虑一个MDP的简单例子如 图 1 ，其中每个绿色圆圈代表一个状态，一共有s_1\\sim s_5这5个状态。黑色实线箭头代表可以采取的动作，黄色小圆圈代表动作。需要注意的是，并非在每个状态都能采取所有动作，例如在s_1,智能体只能采取”保持s_1“和”前往s_2“这两个动作，无法采取其他动作。\n每个黄色小圆圈旁的红色数字代表在某个状态下采取某个动作能获得的奖励。虚线箭头代表采取动作后可能转移到的状态，箭头边上的带方框的数字代表转移概率，如果没有数字则表示转移概率为1.例如，在s_2下，如果采取动作”前往s_3“就能得到奖励-2,并且以概率1转移到s_3;在s_4下，如果采取”概率前往”这个动作，就能得到奖励1,并且会分别以概率0.2,0.4,0.4转移到s_2,s_3或s_4.\n\n\n\n\n\n\n图 1： MDP一个简单例子\n\n\n\n接下来我们编写代码来表示 图 1 中的MDP，并定义两个策略，第一个策略是一个完全随机策略，即在每个状态下，智能体会以同样的概率选取它可能采取的动作。例如，在s_1下智能体会以0.5,0.5的概率选取动作”保持s_1“和”前往s_2“.第二个策略是一个提前设定的策略。\n\nimport numpy as np\nS = [\"s1\", \"s2\", \"s3\", \"s4\", \"s5\"]  # 状态集合\nA = [\"保持s1\", \"前往s1\", \"前往s2\", \"前往s3\", \"前往s4\", \"前往s5\", \"概率前往\"]  # 动作集合\n# 状态转移函数\nP = {\n    \"s1-保持s1-s1\": 1.0,\n    \"s1-前往s2-s2\": 1.0,\n    \"s2-前往s1-s1\": 1.0,\n    \"s2-前往s3-s3\": 1.0,\n    \"s3-前往s4-s4\": 1.0,\n    \"s3-前往s5-s5\": 1.0,\n    \"s4-前往s5-s5\": 1.0,\n    \"s4-概率前往-s2\": 0.2,\n    \"s4-概率前往-s3\": 0.4,\n    \"s4-概率前往-s4\": 0.4,\n}\n# 奖励函数\nR = {\n    \"s1-保持s1\": -1,\n    \"s1-前往s2\": 0,\n    \"s2-前往s1\": -1,\n    \"s2-前往s3\": -2,\n    \"s3-前往s4\": -2,\n    \"s3-前往s5\": 0,\n    \"s4-前往s5\": 10,\n    \"s4-概率前往\": 1,\n}\ngamma = 0.5  # 折扣因子\nMDP = (S, A, P, R, gamma)\n\n# 策略1,随机策略\nPi_1 = {\n    \"s1-保持s1\": 0.5,\n    \"s1-前往s2\": 0.5,\n    \"s2-前往s1\": 0.5,\n    \"s2-前往s3\": 0.5,\n    \"s3-前往s4\": 0.5,\n    \"s3-前往s5\": 0.5,\n    \"s4-前往s5\": 0.5,\n    \"s4-概率前往\": 0.5,\n}\n# 策略2\nPi_2 = {\n    \"s1-保持s1\": 0.6,\n    \"s1-前往s2\": 0.4,\n    \"s2-前往s1\": 0.3,\n    \"s2-前往s3\": 0.7,\n    \"s3-前往s4\": 0.5,\n    \"s3-前往s5\": 0.5,\n    \"s4-前往s5\": 0.1,\n    \"s4-概率前往\": 0.9,\n}\n\n\n# 把输入的两个字符串通过“-”连接,便于使用上述定义的P、R变量\ndef join(str1, str2):\n    return str1 + '-' + str2\n\n接下来我们想要计算该MDP下，一个策略\\pi的状态价值函数。我们现有的工具是MRP的解析解方法，一个自然的想法是给定一个MDP和一个策略\\pi,我们是否可以将其转化为一个MRP？答案是肯定的，我们可以将策略的动作选择进行边缘化（Marginalization），就可以得到没有动作的MRP了。具体来说，对于某一个状态，我们根据策略所有动作的概率进行加权，得到的奖励和就可以认为是一个MRP在该状态下的奖励，即： \nr'(s)=\\sum_{a\\in\\mathcal{A}}\\pi(a|s)r(s,a)\n\n同理，我们计算采取动作的概率与使s转移到s'的概率的乘积，再将这些乘积相加，其和就是一个MRP的状态从s转移至s'的概率：\n\nP'(s'|s)=\\sum_{a\\in\\mathcal{A}}\\pi(a|s)\n\n于是，我们构建得到了一个MRP:\\langle \\mathcal{S},P',r',\\gamma\\rangle.根据价值函数的定义可以发现，转化前的 MDP 的状态价值函数和转化后的 MRP 的价值函数是一样的。于是我们可以用 MRP 中计算价值函数的解析解来计算这个 MDP 中该策略的状态价值函数。\n接下来，我们用代码实现该方法，计算用随即策略Pi_1时的状态价值函数，为了简单起见，我们将直接给出转化后的MRP的状态转移矩阵和奖励函数。\n\ngamma = 0.5\n# 转化后的MRP的状态转移矩阵\nP_from_mdp_to_mrp = [\n    [0.5, 0.5, 0.0, 0.0, 0.0],\n    [0.5, 0.0, 0.5, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.5, 0.5],\n    [0.0, 0.1, 0.2, 0.2, 0.5],\n    [0.0, 0.0, 0.0, 0.0, 1.0],\n]\nP_from_mdp_to_mrp = np.array(P_from_mdp_to_mrp)\nR_from_mdp_to_mrp = [-0.5, -1.5, -1.0, 5.5, 0]\n\nV = compute(P_from_mdp_to_mrp, R_from_mdp_to_mrp, gamma, 5)\nprint(\"MDP中每个状态价值分别为\\n\", V)\n\nMDP中每个状态价值分别为\n [[-1.22555411]\n [-1.67666232]\n [ 0.51890482]\n [ 6.0756193 ]\n [ 0.        ]]\n\n\n知道了状态价值函数V^{\\pi}(s)后，我们可以计算动作价值函数Q^{\\pi}(s,a).例如(s_4,\\text{概率前往})的动作价值为2.152，根据以下公式可以计算得到：\n\nQ^{\\pi}(s,a)=r(s,a)+\\gamma\\sum_{s'\\in\\mathcal{S}}P(s'|s,a)V^{\\pi}(s')\n\n这个 MRP 解析解的方法在状态动作集合比较大的时候不是很适用，那有没有其他的方法呢？章节 2 将介绍用动态规划算法来计算得到价值函数。章节 1.3 将介绍用蒙特卡洛方法来近似估计这个价值函数，用蒙特卡洛方法的好处在于我们不需要知道 MDP 的状态转移函数和奖励函数，它可以得到一个近似值，并且采样数越多越准确。\n\n\n\n\n蒙特卡洛方法（Monte-Carlo methods）也被称为统计模拟方法，是一种基于概率统计的数值计算方法。运用MC方法时我们通常使用重复随机抽样，然后运用概率统计方法来从抽样结果中归纳出我们想求的目标的数值估计。一个简单的例子是用蒙特卡洛方法来计算圆的面积。例如，在正方形内部随机产生若干个点，细数落在圆中点的个数，圆的面积与正方形面积之比就等于圆中点的个数与正方形中点的个数之比。如果我们随机产生的点的个数越多，计算得到圆的面积就越接近于真实的圆的面积。\n我们现在介绍如何用蒙特卡洛方法来估计一个策略在一个马尔可夫决策过程中的状态价值函数。回忆一下，一个状态的价值是它的期望回报，那么一个很直观的想法就是用策略在 MDP 上采样很多条序列，计算从这个状态出发的回报再求其期望就可以了，公式如下：\n\nV^{\\pi}(s)=\\mathbb{E}_{\\pi}\\left[ G_t|S_t=s \\right]\\approx \\frac{1}{N}\\sum_{i=1}^N G_t^{(i)}\n\n在一条序列中，可能没有出现过这个状态，可能只出现过一次这个状态，也可能出现过很多次这个状态。我们介绍的蒙特卡洛价值估计方法会在该状态每一次出现时计算它的回报。还有一种选择是一条序列只计算一次回报，也就是这条序列第一次出现该状态时计算后面的累积奖励，而后面再次出现该状态时，该状态就被忽略了。假设我们现在用策略\\pi从s开始采样序列，据此来计算状态价值。我们为每一个状态维护一个计数器和总回报，计算状态价值的具体过程如下所示。\n\n使用策略\\pi 采样若干条序列： \ns_0^{(i)}\\overset{a_0^{(i)}}{\\rightarrow} r_0^{(i)},s_1^{(i)}\\overset{a_1^{(i)}}{\\rightarrow} r_1^{(i)},\ns_2^{(i)}\\overset{a_2^{(i)}}{\\rightarrow},...,\\overset{a_{T-1}^{(i)}}{\\rightarrow} r_{T-1}^{(i)},s_T^{(i)}\n\n对每一条序列中的每一时间步t的状态s进行以下操作：\n\n更新状态s的计数器N(s)\\leftarrow N(s)+1;\n更新状态s的总回报M(s)\\leftarrow M(s)+G_t;\n\n每一个状态的价值被估计为回报的平均值V(s)=\\=M(s)/N(s).\n\n根据大数定律，当N(s)\\rightarrow \\infty,有V(s)\\rightarrow V^{\\pi}(s). 计算回报的期望时，除了可以把所有的回报加起来除以次数，还有一种增量更新的方法。对于每个状态s和对应回报G,进行如下计算：\n\nN(s)\\leftarrow N(s)+1\nV(s)\\leftarrow V(s)+\\frac{G-V(s)}{N(s)}\n\n接下来我们用代码定义一个采样函数，采样函数需要遵守状态转移矩阵和相应策略，每次将(s,a,r,s_next)元组放入序列中，直到到达终止序列。然后我们通过该函数，用随即策略在@fig-mdp 的MDP中随机采样几条序列。\n\ndef sample(MDP, Pi, timestep_max, number):\n    ''' 采样函数,策略Pi,限制最长时间步timestep_max,总共采样序列数number '''\n    S, A, P, R, gamma = MDP\n    episodes = []\n    for _ in range(number):\n        episode = []\n        timestep = 0\n        s = S[np.random.randint(4)]  # 随机选择一个除s5以外的状态s作为起点\n        # 当前状态为终止状态或者时间步太长时,一次采样结束\n        while s != \"s5\" and timestep &lt;= timestep_max:\n            timestep += 1\n            rand, temp = np.random.rand(), 0\n            # 在状态s下根据策略选择动作\n            for a_opt in A:\n                temp += Pi.get(join(s, a_opt), 0)\n                if temp &gt; rand:\n                    a = a_opt\n                    r = R.get(join(s, a), 0)\n                    break\n            rand, temp = np.random.rand(), 0\n            # 根据状态转移概率得到下一个状态s_next\n            for s_opt in S:\n                temp += P.get(join(join(s, a), s_opt), 0)\n                if temp &gt; rand:\n                    s_next = s_opt\n                    break\n            episode.append((s, a, r, s_next))  # 把（s,a,r,s_next）元组放入序列中\n            s = s_next  # s_next变成当前状态,开始接下来的循环\n        episodes.append(episode)\n    return episodes\n\n\n# 采样5次,每个序列最长不超过20步\nepisodes = sample(MDP, Pi_1, 20, 5)\nprint('第一条序列\\n', episodes[0])\nprint('第二条序列\\n', episodes[1])\nprint('第五条序列\\n', episodes[4])\n\n第一条序列\n [('s1', '保持s1', -1, 's1'), ('s1', '保持s1', -1, 's1'), ('s1', '保持s1', -1, 's1'), ('s1', '保持s1', -1, 's1'), ('s1', '前往s2', 0, 's2'), ('s2', '前往s3', -2, 's3'), ('s3', '前往s4', -2, 's4'), ('s4', '前往s5', 10, 's5')]\n第二条序列\n [('s2', '前往s1', -1, 's1'), ('s1', '前往s2', 0, 's2'), ('s2', '前往s1', -1, 's1'), ('s1', '前往s2', 0, 's2'), ('s2', '前往s1', -1, 's1'), ('s1', '前往s2', 0, 's2'), ('s2', '前往s1', -1, 's1'), ('s1', '前往s2', 0, 's2'), ('s2', '前往s3', -2, 's3'), ('s3', '前往s5', 0, 's5')]\n第五条序列\n [('s4', '前往s5', 10, 's5')]\n\n\n\n# 对所有采样序列计算所有状态的价值\ndef MC(episodes, V, N, gamma):\n    for episode in episodes:\n        G = 0\n        for i in range(len(episode) - 1, -1, -1):  #一个序列从后往前计算\n            (s, a, r, s_next) = episode[i]\n            G = r + gamma * G\n            N[s] = N[s] + 1\n            V[s] = V[s] + (G - V[s]) / N[s]\n\n\ntimestep_max = 20\n# 采样1000次,可以自行修改\nepisodes = sample(MDP, Pi_1, timestep_max, 1000)\ngamma = 0.5\nV = {\"s1\": 0, \"s2\": 0, \"s3\": 0, \"s4\": 0, \"s5\": 0}\nN = {\"s1\": 0, \"s2\": 0, \"s3\": 0, \"s4\": 0, \"s5\": 0}\nMC(episodes, V, N, gamma)\nprint(\"使用蒙特卡洛方法计算MDP的状态价值为\\n\", V)\n\n使用蒙特卡洛方法计算MDP的状态价值为\n {'s1': -1.2275505036753624, 's2': -1.7044112135923994, 's3': 0.46556681493049196, 's4': 5.958254588438255, 's5': 0}\n\n\n可以看到用蒙特卡洛方法估计得到的状态价值和我们用 MRP 解析解得到的状态价值是很接近的。这得益于我们采样了比较多的序列，感兴趣的读者可以尝试修改采样次数，然后观察蒙特卡洛方法的结果。\n\n\n\n强化学习的目标通常是找到一个策略，使得智能体从初始状态出发能获得最多的期望回报。我们首先定义策略之间的偏序关系：当且仅当对于任意状态s都有V^{\\pi}(s)&gt; V^{\\pi'}(s), 记\\pi&gt;\\pi'. 于是在有限状态和动作集合的MDP中至少存在一个策略比其他所有策略都好或者至少存在一个策略不差于其他所有策略，这个策略就是最优策略（Optimal policy）。最优策略可能有很多个，我们都将其表示为\\pi^*(s).\n最优策略都有相同的状态价值函数，我们称之为最有状态价值函数，表示为： \nV^*(s)=\\max_{\\pi} V^{\\pi}(s),\\forall s\\in\\mathcal{S}\n\n同理我们定义最优动作价值函数： \nQ^*(s,a)=\\max_{\\pi}Q^{\\pi}(s,a),\\forall s\\in\\mathcal{S},a\\in\\mathcal{A}\n\n为了使Q^*(s,a)最大，我们需要在当前状态动作对(s,a)之后都执行最优策略，于是我们得到了最有状态价值函数和最优动作价值函数之间的关系：\n\nQ^\\pi{s,a}=r(s,a)+\\gamma\\sum_{s\\in\\mathcal{S}}P(s'|s,a)V^*(s')\n\n这与在普通策略下的状态价值函数和动作价值函数之间的关系是一样的。另一方面，最优状态价值是选择此时使最优动作价值最大的那一个动作时的状态价值： \nV^*(s)=\\max_{a\\in\\mathcal{A}}Q^*(s,a)\n\n\n\n根据V^*(s)和Q^*(s,a)的关系，我们可以得到贝尔曼最优方程（Bellman optimality equation）：\n\n\\begin{aligned}\nV^*(s)&=\\max_{a\\in\\mathcal{A}}\\left\\{ r(s,a)+\\gamma\\sum_{s'\\in\\mathcal{S}}p(s'|s,a)V^*(s')\\right\\}\\\\\nQ^*(s,a)=r(s,a)+\\gamma\\sum_{s'\\in \\mathcal{S}}p(s'|s,a)\\max_{a'\\in\\mathcal{A}}Q^*(s',a')\n\\end{aligned}\n\n章节 2 将介绍如何用动态规划算法得到最优策略。\n\n\n\n\n马尔可夫决策过程是强化学习中的基础概念，强化学习中的环境就是一个马尔可夫决策过程。我们接下来将要介绍的强化学习算法通常都是在求解马尔可夫决策过程中的最优策略。"
  },
  {
    "objectID": "index.html#马尔可夫决策过程",
    "href": "index.html#马尔可夫决策过程",
    "title": "强化学习基础",
    "section": "",
    "text": "在马尔可夫过程的基础上加入奖励函数r和折扣因子\\gamma,就可以得到马尔可夫奖励过程（Markov Reward Process, MRP）。一个马尔可夫奖励过程由\\langle S,\\mathcal{P},r,\\gamma\\rangle构成。\n\n\n在一个MRP中，从第t时刻状态S_t开始，直到终止状态时，所有奖励的衰减之和称为回报G_t（Return），公式如下：\n\nG_t=R_t+\\gamma R_{t+1}+\\gamma^2 R_{t+2}+\\dots=\\sum_{k=0}^{\\infty}\\gamma^k R_{t+k},\n 其中，R_t表示在时刻t获得的奖励。\n\n\n\n在MRP中，一个状态的期望回报（即从这个状态出发的未来累积奖励的期望）被称为这个状态的价值（Value）。所有状态的价值就组成了价值函数（Value function），价值函数的输入为某个状态，输出为这个状态的价值。我们将价值函数写成\n\n\\begin{aligned}\nV(s)&=\\mathbb{E}\\left[G_t\\mid S_t=s\\right]\\\\\n&= \\mathbb{E}\\left[ R_t+\\gamma R_{t+1}+\\gamma^2 R_{t+2} +\\dots\\mid S_t=s\\right]\\\\\n&=\\mathbb{E}\\left[ R_t+\\gamma (R_{t+1}+\\gamma R_{t+2} +\\dots)\\mid S_t=s\\right]\\\\\n&=\\mathbb{E}\\left[ R_t+\\gamma G_{t+1}\\mid S_t=s \\right]\\\\\n&=\\mathbb{E}\\left[ R_t+\\gamma V(S_{t+1})\\mid S_t=s \\right]\n\\end{aligned}\n\n在上式的最后一个等号中，一方面，即时奖励的期望正是奖励函数的输出，即\\mathbb{E}\\left[ R_t\\mid S_t=s \\right]=r(s);另一方面，等式中剩余部分\\mathbb{E}\\left[\\gamma V(S_{t+1})\\mid S_t=s\\right]可以根据从状态s出发的转移概率得到，即\n\nV(s)=r(s)+\\gamma \\sum_{s'\\in \\mathcal{S}}p(s'\\mid s)V(s')\n\n上式就是MRP中非常有名的贝尔曼方程（Bellman equation），对每一个状态都成立。若通过矩阵运算可以得到以下解析解：\n\n\\begin{aligned}\n\\mathcal{V}&=\\mathcal{R}+\\gamma\\mathcal{P}\\mathcal{V}\\\\\n\\mathcal{V}&=(I-\\gamma\\mathcal{P})^{-1}\\mathcal{R}\n\\end{aligned}\n 其中\\mathcal{V,R,P}均为向量或矩阵。以上解析解的计算复杂度是O(n^3),其中n是状态个数，因此这种方法只适用于很小的MRP。求解较大规模的MRP奖励过程中的价值函数时，可以使用动态规划、蒙特卡洛、时序差分，这些方法将在之后的章节介绍。\n接下来编写代码来实现求解价值函数的解析解方法，并据此计算该马尔可夫奖励过程中所有状态的价值。\n\ndef compute(P, rewards, gamma, states_num):\n    ''' 利用贝尔曼方程的矩阵形式计算解析解,states_num是MRP的状态数 '''\n    rewards = np.array(rewards).reshape((-1, 1))  #将rewards写成列向量形式\n    value = np.dot(np.linalg.inv(np.eye(states_num, states_num) - gamma * P),\n                   rewards)\n    return value\n\n\n\n\n\n如果有一个外界的“刺激”来共同改变这个随机过程，就有了马尔可夫决策过程（MDP）。我们将这个来自外界的刺激称为智能体（Agent）的动作，在MRP的基础上加入动作，就得到了MDP。MDP有元组\\langle \\mathcal{S,A,P},r,\\gamma\\rangle构成。\n\n\n智能体的策略（Policy）通常用字母\\pi表示。策略\\pi(a|s)=P(A_t=a|S_t=s)是一个函数，表示在输入状态s情况下采取动作a的概率。当一个策略是确定性策略（Deterministic policy）时，它在每个状态只输出一个确定性的动作，即只有该动作的概率为1,其他动作的概率为0; 当一个策略是随机性策略（Stochastic policy）时，它在每个状态时输出的是关于动作的概率分布，然后根据该分布进行采样就可以得到一个动作。\n在 MDP 中，由于马尔可夫性质的存在，策略只需要与当前状态有关，不需要考虑历史状态。回顾一下在 MRP 中的价值函数，在 MDP 中也同样可以定义类似的价值函数。但此时的价值函数与策略有关，这意为着对于两个不同的策略来说，它们在同一个状态下的价值也很可能是不同的。这很好理解，因为不同的策略会采取不同的动作，从而之后会遇到不同的状态，以及获得不同的奖励，所以它们的累积奖励的期望也就不同，即状态价值不同。\n\n\n\n我们用V^{\\pi}(s)表示在MDP中基于策略\\pi的状态价值函数（State-value function），定义在从状态s出发遵循策略\\pi能获得的期望回报，数学表达为\n\nV^{\\pi}(s)=\\mathbb{E}_{\\pi}[G_t|S_t=s]\n\n\n\n\n不同于MRP，MDP中由于动作的存在我们定义一个动作价值函数（Action-value function）。我们用Q^{\\pi}(s,a)表示在MDP遵循策略\\pi时，对当前状态s执行动作a得到的期望回报：\n\nQ^{\\pi}(s,a)=\\mathbb{E}_{\\pi}[G_t|S_t=s,A_t=a]\n\n状态价值函数和动作价值函数之间的关系：\n在使用策略\\pi时，状态s的价值等于在该状态下基于策略\\pi采取所有动作的概率与相应价值相乘再求和的结果：\n\nV^{\\pi}(s)=\\sum_{a\\in\\mathcal{A}}\\pi(a|s)Q^{\\pi}(s,a)\n\n在使用策略\\pi时，状态s下采取动作a的价值等于即时奖励加上经过衰减后的所有可能的下一个状态转移概率与相应价值的乘积：\n\nQ^{\\pi}(s,a)=r(s,a)+\\gamma\\sum_{s'\\in\\mathcal{S}}P(s'|s,a)V^{\\pi}(s')\n\n\n\n\n在贝尔曼方程中加上期望二字是为了与接下来的贝尔曼最优方程进行区分。我们通过加单推到就可以分别得到两个价值函数的贝尔曼期望方程（Bellman Expect Equation）：\n\n\\begin{aligned}\nV^{\\pi}(s)&=\\mathbb{E}_{\\pi}\\left[R_t+\\gamma V^{\\pi}(S_{t+1})|S_t=s\\right]\\\\\n&=\\sum_{a\\in\\mathcal{A}}\\pi(a|s)\\left( r(s,a)+\\gamma\\sum_{s'\\in\\mathcal{S}}p(s'|s,a)V^{\\pi}(s')\\right)\\\\\n\\\\\nQ^{\\pi}(s,a)&=\\mathbb{E}_{\\pi}\\left[R_t+\\gamma Q^{\\pi}(S_{t+1},A_{t+1}|S_t=s, A_t=a)\\right]\\\\\n&=r(s,a)+\\gamma\\sum_{s'\\in\\mathcal{S}}p(s'|s,a)\\sum_{a'\\in\\mathcal{A}}\\pi(a'|s')Q^{\\pi}(s',a)\n\\end{aligned}\n\n价值函数和贝尔曼方程是强化学习非常重要的组成部分，之后的一些强化学习算法都是据此推导出来的。\n现在我们考虑一个MDP的简单例子如@fig-mdp ，其中每个绿色圆圈代表一个状态，一共有s_1\\sim s_5这5个状态。黑色实线箭头代表可以采取的动作，黄色小圆圈代表动作。需要注意的是，并非在每个状态都能采取所有动作，例如在s_1,智能体只能采取”保持s_1“和”前往s_2“这两个动作，无法采取其他动作。\n每个黄色小圆圈旁的红色数字代表在某个状态下采取某个动作能获得的奖励。虚线箭头代表采取动作后可能转移到的状态，箭头边上的带方框的数字代表转移概率，如果没有数字则表示转移概率为1.例如，在s_2下，如果采取动作”前往s_3“就能得到奖励-2,并且以概率1转移到s_3;在s_4下，如果采取”概率前往”这个动作，就能得到奖励1,并且会分别以概率0.2,0.4,0.4转移到s_2,s_3或s_4.\n\n\n\n\n\n\n图 1： MDP一个简单例子\n\n\n\n接下来我们编写代码来表示@fig-mdp 中的MDP，并定义两个策略，第一个策略是一个完全随机策略，即在每个状态下，智能体会以同样的概率选取它可能采取的动作。例如，在s_1下智能体会以0.5,0.5的概率选取动作”保持s_1“和”前往s_2“.第二个策略是一个提前设定的策略。\n\nimport numpy as np\nS = [\"s1\", \"s2\", \"s3\", \"s4\", \"s5\"]  # 状态集合\nA = [\"保持s1\", \"前往s1\", \"前往s2\", \"前往s3\", \"前往s4\", \"前往s5\", \"概率前往\"]  # 动作集合\n# 状态转移函数\nP = {\n    \"s1-保持s1-s1\": 1.0,\n    \"s1-前往s2-s2\": 1.0,\n    \"s2-前往s1-s1\": 1.0,\n    \"s2-前往s3-s3\": 1.0,\n    \"s3-前往s4-s4\": 1.0,\n    \"s3-前往s5-s5\": 1.0,\n    \"s4-前往s5-s5\": 1.0,\n    \"s4-概率前往-s2\": 0.2,\n    \"s4-概率前往-s3\": 0.4,\n    \"s4-概率前往-s4\": 0.4,\n}\n# 奖励函数\nR = {\n    \"s1-保持s1\": -1,\n    \"s1-前往s2\": 0,\n    \"s2-前往s1\": -1,\n    \"s2-前往s3\": -2,\n    \"s3-前往s4\": -2,\n    \"s3-前往s5\": 0,\n    \"s4-前往s5\": 10,\n    \"s4-概率前往\": 1,\n}\ngamma = 0.5  # 折扣因子\nMDP = (S, A, P, R, gamma)\n\n# 策略1,随机策略\nPi_1 = {\n    \"s1-保持s1\": 0.5,\n    \"s1-前往s2\": 0.5,\n    \"s2-前往s1\": 0.5,\n    \"s2-前往s3\": 0.5,\n    \"s3-前往s4\": 0.5,\n    \"s3-前往s5\": 0.5,\n    \"s4-前往s5\": 0.5,\n    \"s4-概率前往\": 0.5,\n}\n# 策略2\nPi_2 = {\n    \"s1-保持s1\": 0.6,\n    \"s1-前往s2\": 0.4,\n    \"s2-前往s1\": 0.3,\n    \"s2-前往s3\": 0.7,\n    \"s3-前往s4\": 0.5,\n    \"s3-前往s5\": 0.5,\n    \"s4-前往s5\": 0.1,\n    \"s4-概率前往\": 0.9,\n}\n\n\n# 把输入的两个字符串通过“-”连接,便于使用上述定义的P、R变量\ndef join(str1, str2):\n    return str1 + '-' + str2\n\n接下来我们想要计算该MDP下，一个策略\\pi的状态价值函数。我们现有的工具是MRP的解析解方法，一个自然的想法是给定一个MDP和一个策略\\pi,我们是否可以将其转化为一个MRP？答案是肯定的，我们可以将策略的动作选择进行边缘化（Marginalization），就可以得到没有动作的MRP了。具体来说，对于某一个状态，我们根据策略所有动作的概率进行加权，得到的奖励和就可以认为是一个MRP在该状态下的奖励，即： \nr'(s)=\\sum_{a\\in\\mathcal{A}}\\pi(a|s)r(s,a)\n\n同理，我们计算采取动作的概率与使s转移到s'的概率的乘积，再将这些乘积相加，其和就是一个MRP的状态从s转移至s'的概率：\n\nP'(s'|s)=\\sum_{a\\in\\mathcal{A}}\\pi(a|s)\n\n于是，我们构建得到了一个MRP:\\langle \\mathcal{S},P',r',\\gamma\\rangle.根据价值函数的定义可以发现，转化前的 MDP 的状态价值函数和转化后的 MRP 的价值函数是一样的。于是我们可以用 MRP 中计算价值函数的解析解来计算这个 MDP 中该策略的状态价值函数。\n接下来，我们用代码实现该方法，计算用随即策略Pi_1时的状态价值函数，为了简单起见，我们将直接给出转化后的MRP的状态转移矩阵和奖励函数。\n\ngamma = 0.5\n# 转化后的MRP的状态转移矩阵\nP_from_mdp_to_mrp = [\n    [0.5, 0.5, 0.0, 0.0, 0.0],\n    [0.5, 0.0, 0.5, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.5, 0.5],\n    [0.0, 0.1, 0.2, 0.2, 0.5],\n    [0.0, 0.0, 0.0, 0.0, 1.0],\n]\nP_from_mdp_to_mrp = np.array(P_from_mdp_to_mrp)\nR_from_mdp_to_mrp = [-0.5, -1.5, -1.0, 5.5, 0]\n\nV = compute(P_from_mdp_to_mrp, R_from_mdp_to_mrp, gamma, 5)\nprint(\"MDP中每个状态价值分别为\\n\", V)\n\nMDP中每个状态价值分别为\n [[-1.22555411]\n [-1.67666232]\n [ 0.51890482]\n [ 6.0756193 ]\n [ 0.        ]]\n\n\n知道了状态价值函数V^{\\pi}(s)后，我们可以计算动作价值函数Q^{\\pi}(s,a).例如(s_4,\\text{概率前往})的动作价值为2.152，根据以下公式可以计算得到：\n\nQ^{\\pi}(s,a)=r(s,a)+\\gamma\\sum_{s'\\in\\mathcal{S}}P(s'|s,a)V^{\\pi}(s')\n\n这个 MRP 解析解的方法在状态动作集合比较大的时候不是很适用，那有没有其他的方法呢？第 章节 1.2 章将介绍用动态规划算法来计算得到价值函数。章节 1.1.3 节将介绍用蒙特卡洛方法来近似估计这个价值函数，用蒙特卡洛方法的好处在于我们不需要知道 MDP 的状态转移函数和奖励函数，它可以得到一个近似值，并且采样数越多越准确。\n\n\n\n\n蒙特卡洛方法（Monte-Carlo methods）也被称为统计模拟方法，是一种基于概率统计的数值计算方法。运用MC方法时我们通常使用重复随机抽样，然后运用概率统计方法来从抽样结果中归纳出我们想求的目标的数值估计。一个简单的例子是用蒙特卡洛方法来计算圆的面积。例如，在正方形内部随机产生若干个点，细数落在圆中点的个数，圆的面积与正方形面积之比就等于圆中点的个数与正方形中点的个数之比。如果我们随机产生的点的个数越多，计算得到圆的面积就越接近于真实的圆的面积。\n我们现在介绍如何用蒙特卡洛方法来估计一个策略在一个马尔可夫决策过程中的状态价值函数。回忆一下，一个状态的价值是它的期望回报，那么一个很直观的想法就是用策略在 MDP 上采样很多条序列，计算从这个状态出发的回报再求其期望就可以了，公式如下：\n\nV^{\\pi}(s)=\\mathbb{E}_{\\pi}\\left[ G_t|S_t=s \\right]\\approx \\frac{1}{N}\\sum_{i=1}^N G_t^{(i)}\n\n在一条序列中，可能没有出现过这个状态，可能只出现过一次这个状态，也可能出现过很多次这个状态。我们介绍的蒙特卡洛价值估计方法会在该状态每一次出现时计算它的回报。还有一种选择是一条序列只计算一次回报，也就是这条序列第一次出现该状态时计算后面的累积奖励，而后面再次出现该状态时，该状态就被忽略了。假设我们现在用策略\\pi从s开始采样序列，据此来计算状态价值。我们为每一个状态维护一个计数器和总回报，计算状态价值的具体过程如下所示。\n\n使用策略\\pi 采样若干条序列： \ns_0^{(i)}\\overset{a_0^{(i)}}{\\rightarrow} r_0^{(i)},s_1^{(i)}\\overset{a_1^{(i)}}{\\rightarrow} r_1^{(i)},\ns_2^{(i)}\\overset{a_2^{(i)}}{\\rightarrow},...,\\overset{a_{T-1}^{(i)}}{\\rightarrow} r_{T-1}^{(i)},s_T^{(i)}\n\n对每一条序列中的每一时间步t的状态s进行以下操作：\n\n更新状态s的计数器N(s)\\leftarrow N(s)+1;\n更新状态s的总回报M(s)\\leftarrow M(s)+G_t;\n\n每一个状态的价值被估计为回报的平均值V(s)=\\=M(s)/N(s).\n\n根据大数定律，当N(s)\\rightarrow \\infty,有V(s)\\rightarrow V^{\\pi}(s). 计算回报的期望时，除了可以把所有的回报加起来除以次数，还有一种增量更新的方法。对于每个状态s和对应回报G,进行如下计算：\n\nN(s)\\leftarrow N(s)+1\nV(s)\\leftarrow V(s)+\\frac{G-V(s)}{N(s)}\n\n接下来我们用代码定义一个采样函数，采样函数需要遵守状态转移矩阵和相应策略，每次将(s,a,r,s_next)元组放入序列中，直到到达终止序列。然后我们通过该函数，用随即策略在@fig-mdp 的MDP中随机采样几条序列。\n\ndef sample(MDP, Pi, timestep_max, number):\n    ''' 采样函数,策略Pi,限制最长时间步timestep_max,总共采样序列数number '''\n    S, A, P, R, gamma = MDP\n    episodes = []\n    for _ in range(number):\n        episode = []\n        timestep = 0\n        s = S[np.random.randint(4)]  # 随机选择一个除s5以外的状态s作为起点\n        # 当前状态为终止状态或者时间步太长时,一次采样结束\n        while s != \"s5\" and timestep &lt;= timestep_max:\n            timestep += 1\n            rand, temp = np.random.rand(), 0\n            # 在状态s下根据策略选择动作\n            for a_opt in A:\n                temp += Pi.get(join(s, a_opt), 0)\n                if temp &gt; rand:\n                    a = a_opt\n                    r = R.get(join(s, a), 0)\n                    break\n            rand, temp = np.random.rand(), 0\n            # 根据状态转移概率得到下一个状态s_next\n            for s_opt in S:\n                temp += P.get(join(join(s, a), s_opt), 0)\n                if temp &gt; rand:\n                    s_next = s_opt\n                    break\n            episode.append((s, a, r, s_next))  # 把（s,a,r,s_next）元组放入序列中\n            s = s_next  # s_next变成当前状态,开始接下来的循环\n        episodes.append(episode)\n    return episodes\n\n\n# 采样5次,每个序列最长不超过20步\nepisodes = sample(MDP, Pi_1, 20, 5)\nprint('第一条序列\\n', episodes[0])\nprint('第二条序列\\n', episodes[1])\nprint('第五条序列\\n', episodes[4])\n\n第一条序列\n [('s3', '前往s4', -2, 's4'), ('s4', '前往s5', 10, 's5')]\n第二条序列\n [('s3', '前往s4', -2, 's4'), ('s4', '概率前往', 1, 's2'), ('s2', '前往s3', -2, 's3'), ('s3', '前往s5', 0, 's5')]\n第五条序列\n [('s2', '前往s1', -1, 's1'), ('s1', '前往s2', 0, 's2'), ('s2', '前往s3', -2, 's3'), ('s3', '前往s4', -2, 's4'), ('s4', '前往s5', 10, 's5')]\n\n\n\n# 对所有采样序列计算所有状态的价值\ndef MC(episodes, V, N, gamma):\n    for episode in episodes:\n        G = 0\n        for i in range(len(episode) - 1, -1, -1):  #一个序列从后往前计算\n            (s, a, r, s_next) = episode[i]\n            G = r + gamma * G\n            N[s] = N[s] + 1\n            V[s] = V[s] + (G - V[s]) / N[s]\n\n\ntimestep_max = 20\n# 采样1000次,可以自行修改\nepisodes = sample(MDP, Pi_1, timestep_max, 1000)\ngamma = 0.5\nV = {\"s1\": 0, \"s2\": 0, \"s3\": 0, \"s4\": 0, \"s5\": 0}\nN = {\"s1\": 0, \"s2\": 0, \"s3\": 0, \"s4\": 0, \"s5\": 0}\nMC(episodes, V, N, gamma)\nprint(\"使用蒙特卡洛方法计算MDP的状态价值为\\n\", V)\n\n使用蒙特卡洛方法计算MDP的状态价值为\n {'s1': -1.2199909859035727, 's2': -1.6944299913955496, 's3': 0.4373151566032693, 's4': 5.962755391182896, 's5': 0}\n\n\n可以看到用蒙特卡洛方法估计得到的状态价值和我们用 MRP 解析解得到的状态价值是很接近的。这得益于我们采样了比较多的序列，感兴趣的读者可以尝试修改采样次数，然后观察蒙特卡洛方法的结果。\n\n\n\n强化学习的目标通常是找到一个策略，使得智能体从初始状态出发能获得最多的期望回报。我们首先定义策略之间的偏序关系：当且仅当对于任意状态s都有V^{\\pi}(s)&gt; V^{\\pi'}(s), 记\\pi&gt;\\pi'. 于是在有限状态和动作集合的MDP中至少存在一个策略比其他所有策略都好或者至少存在一个策略不差于其他所有策略，这个策略就是最优策略（Optimal policy）。最优策略可能有很多个，我们都将其表示为\\pi^*(s).\n最优策略都有相同的状态价值函数，我们称之为最有状态价值函数，表示为： \nV^*(s)=\\max_{\\pi} V^{\\pi}(s),\\forall s\\in\\mathcal{S}\n\n同理我们定义最优动作价值函数： \nQ^*(s,a)=\\max_{\\pi}Q^{\\pi}(s,a),\\forall s\\in\\mathcal{S},a\\in\\mathcal{A}\n\n为了使Q^*(s,a)最大，我们需要在当前状态动作对(s,a)之后都执行最优策略，于是我们得到了最有状态价值函数和最优动作价值函数之间的关系：\n\nQ^\\pi{s,a}=r(s,a)+\\gamma\\sum_{s\\in\\mathcal{S}}P(s'|s,a)V^*(s')\n\n这与在普通策略下的状态价值函数和动作价值函数之间的关系是一样的。另一方面，最优状态价值是选择此时使最优动作价值最大的那一个动作时的状态价值： \nV^*(s)=\\max_{a\\in\\mathcal{A}}Q^*(s,a)\n\n\n\n根据V^*(s)和Q^*(s,a)的关系，我们可以得到贝尔曼最优方程（Bellman optimality equation）：\n\n\\begin{aligned}\nV^*(s)&=\\max_{a\\in\\mathcal{A}}\\left\\{ r(s,a)+\\gamma\\sum_{s'\\in\\mathcal{S}}p(s'|s,a)V^*(s')\\right\\}\\\\\nQ^*(s,a)=r(s,a)+\\gamma\\sum_{s'\\in \\mathcal{S}}p(s'|s,a)\\max_{a'\\in\\mathcal{A}}Q^*(s',a')\n\\end{aligned}\n\n第@sec-dynpa 章将介绍如何用动态规划算法得到最优策略。\n\n\n\n\n马尔可夫决策过程是强化学习中的基础概念，强化学习中的环境就是一个马尔可夫决策过程。我们接下来将要介绍的强化学习算法通常都是在求解马尔可夫决策过程中的最优策略。"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html#马尔可夫奖励过程",
    "href": "index.html#马尔可夫奖励过程",
    "title": "强化学习基础",
    "section": "",
    "text": "在马尔可夫过程的基础上加入奖励函数r和折扣因子\\gamma,就可以得到马尔可夫奖励过程（Markov Reward Process, MRP）。一个马尔可夫奖励过程由\\langle S,\\mathcal{P},r,\\gamma\\rangle构成。\n\n\n在一个MRP中，从第t时刻状态S_t开始，直到终止状态时，所有奖励的衰减之和称为回报G_t（Return），公式如下：\n\nG_t=R_t+\\gamma R_{t+1}+\\gamma^2 R_{t+2}+\\dots=\\sum_{k=0}^{\\infty}\\gamma^k R_{t+k},\n 其中，R_t表示在时刻t获得的奖励。\n\n\n\n在MRP中，一个状态的期望回报（即从这个状态出发的未来累积奖励的期望）被称为这个状态的价值（Value）。所有状态的价值就组成了价值函数（Value function），价值函数的输入为某个状态，输出为这个状态的价值。我们将价值函数写成\n\n\\begin{aligned}\nV(s)&=\\mathbb{E}\\left[G_t\\mid S_t=s\\right]\\\\\n&= \\mathbb{E}\\left[ R_t+\\gamma R_{t+1}+\\gamma^2 R_{t+2} +\\dots\\mid S_t=s\\right]\\\\\n&=\\mathbb{E}\\left[ R_t+\\gamma (R_{t+1}+\\gamma R_{t+2} +\\dots)\\mid S_t=s\\right]\\\\\n&=\\mathbb{E}\\left[ R_t+\\gamma G_{t+1}\\mid S_t=s \\right]\\\\\n&=\\mathbb{E}\\left[ R_t+\\gamma V(S_{t+1})\\mid S_t=s \\right]\n\\end{aligned}\n\n在上式的最后一个等号中，一方面，即时奖励的期望正是奖励函数的输出，即\\mathbb{E}\\left[ R_t\\mid S_t=s \\right]=r(s);另一方面，等式中剩余部分\\mathbb{E}\\left[\\gamma V(S_{t+1})\\mid S_t=s\\right]可以根据从状态s出发的转移概率得到，即\n\nV(s)=r(s)+\\gamma \\sum_{s'\\in \\mathcal{S}}p(s'\\mid s)V(s')\n\n上式就是MRP中非常有名的贝尔曼方程（Bellman equation），对每一个状态都成立。若通过矩阵运算可以得到以下解析解：\n\n\\begin{aligned}\n\\mathcal{V}&=\\mathcal{R}+\\gamma\\mathcal{P}\\mathcal{V}\\\\\n\\mathcal{V}&=(I-\\gamma\\mathcal{P})^{-1}\\mathcal{R}\n\\end{aligned}\n 其中\\mathcal{V,R,P}均为向量或矩阵。以上解析解的计算复杂度是O(n^3),其中n是状态个数，因此这种方法只适用于很小的MRP。求解较大规模的MRP奖励过程中的价值函数时，可以使用动态规划、蒙特卡洛、时序差分，这些方法将在之后的章节介绍。\n接下来编写代码来实现求解价值函数的解析解方法，并据此计算该马尔可夫奖励过程中所有状态的价值。\n\ndef compute(P, rewards, gamma, states_num):\n    ''' 利用贝尔曼方程的矩阵形式计算解析解,states_num是MRP的状态数 '''\n    rewards = np.array(rewards).reshape((-1, 1))  #将rewards写成列向量形式\n    value = np.dot(np.linalg.inv(np.eye(states_num, states_num) - gamma * P),\n                   rewards)\n    return value"
  },
  {
    "objectID": "index.html#马尔可夫决策过程-1",
    "href": "index.html#马尔可夫决策过程-1",
    "title": "强化学习基础",
    "section": "",
    "text": "如果有一个外界的“刺激”来共同改变这个随机过程，就有了马尔可夫决策过程（MDP）。我们将这个来自外界的刺激称为智能体（Agent）的动作，在MRP的基础上加入动作，就得到了MDP。MDP有元组\\langle \\mathcal{S,A,P},r,\\gamma\\rangle构成。\n\n\n智能体的策略（Policy）通常用字母\\pi表示。策略\\pi(a|s)=P(A_t=a|S_t=s)是一个函数，表示在输入状态s情况下采取动作a的概率。当一个策略是确定性策略（Deterministic policy）时，它在每个状态只输出一个确定性的动作，即只有该动作的概率为1,其他动作的概率为0; 当一个策略是随机性策略（Stochastic policy）时，它在每个状态时输出的是关于动作的概率分布，然后根据该分布进行采样就可以得到一个动作。\n在 MDP 中，由于马尔可夫性质的存在，策略只需要与当前状态有关，不需要考虑历史状态。回顾一下在 MRP 中的价值函数，在 MDP 中也同样可以定义类似的价值函数。但此时的价值函数与策略有关，这意为着对于两个不同的策略来说，它们在同一个状态下的价值也很可能是不同的。这很好理解，因为不同的策略会采取不同的动作，从而之后会遇到不同的状态，以及获得不同的奖励，所以它们的累积奖励的期望也就不同，即状态价值不同。\n\n\n\n我们用V^{\\pi}(s)表示在MDP中基于策略\\pi的状态价值函数（State-value function），定义在从状态s出发遵循策略\\pi能获得的期望回报，数学表达为\n\nV^{\\pi}(s)=\\mathbb{E}_{\\pi}[G_t|S_t=s]\n\n\n\n\n不同于MRP，MDP中由于动作的存在我们定义一个动作价值函数（Action-value function）。我们用Q^{\\pi}(s,a)表示在MDP遵循策略\\pi时，对当前状态s执行动作a得到的期望回报：\n\nQ^{\\pi}(s,a)=\\mathbb{E}_{\\pi}[G_t|S_t=s,A_t=a]\n\n状态价值函数和动作价值函数之间的关系：\n在使用策略\\pi时，状态s的价值等于在该状态下基于策略\\pi采取所有动作的概率与相应价值相乘再求和的结果：\n\nV^{\\pi}(s)=\\sum_{a\\in\\mathcal{A}}\\pi(a|s)Q^{\\pi}(s,a)\n\n在使用策略\\pi时，状态s下采取动作a的价值等于即时奖励加上经过衰减后的所有可能的下一个状态转移概率与相应价值的乘积：\n\nQ^{\\pi}(s,a)=r(s,a)+\\gamma\\sum_{s'\\in\\mathcal{S}}P(s'|s,a)V^{\\pi}(s')\n\n\n\n\n在贝尔曼方程中加上期望二字是为了与接下来的贝尔曼最优方程进行区分。我们通过加单推到就可以分别得到两个价值函数的贝尔曼期望方程（Bellman Expect Equation）：\n\n\\begin{aligned}\nV^{\\pi}(s)&=\\mathbb{E}_{\\pi}\\left[R_t+\\gamma V^{\\pi}(S_{t+1})|S_t=s\\right]\\\\\n&=\\sum_{a\\in\\mathcal{A}}\\pi(a|s)\\left( r(s,a)+\\gamma\\sum_{s'\\in\\mathcal{S}}p(s'|s,a)V^{\\pi}(s')\\right)\\\\\n\\\\\nQ^{\\pi}(s,a)&=\\mathbb{E}_{\\pi}\\left[R_t+\\gamma Q^{\\pi}(S_{t+1},A_{t+1}|S_t=s, A_t=a)\\right]\\\\\n&=r(s,a)+\\gamma\\sum_{s'\\in\\mathcal{S}}p(s'|s,a)\\sum_{a'\\in\\mathcal{A}}\\pi(a'|s')Q^{\\pi}(s',a)\n\\end{aligned}\n\n价值函数和贝尔曼方程是强化学习非常重要的组成部分，之后的一些强化学习算法都是据此推导出来的。\n现在我们考虑一个MDP的简单例子如 图 1 ，其中每个绿色圆圈代表一个状态，一共有s_1\\sim s_5这5个状态。黑色实线箭头代表可以采取的动作，黄色小圆圈代表动作。需要注意的是，并非在每个状态都能采取所有动作，例如在s_1,智能体只能采取”保持s_1“和”前往s_2“这两个动作，无法采取其他动作。\n每个黄色小圆圈旁的红色数字代表在某个状态下采取某个动作能获得的奖励。虚线箭头代表采取动作后可能转移到的状态，箭头边上的带方框的数字代表转移概率，如果没有数字则表示转移概率为1.例如，在s_2下，如果采取动作”前往s_3“就能得到奖励-2,并且以概率1转移到s_3;在s_4下，如果采取”概率前往”这个动作，就能得到奖励1,并且会分别以概率0.2,0.4,0.4转移到s_2,s_3或s_4.\n\n\n\n\n\n\n图 1： MDP一个简单例子\n\n\n\n接下来我们编写代码来表示 图 1 中的MDP，并定义两个策略，第一个策略是一个完全随机策略，即在每个状态下，智能体会以同样的概率选取它可能采取的动作。例如，在s_1下智能体会以0.5,0.5的概率选取动作”保持s_1“和”前往s_2“.第二个策略是一个提前设定的策略。\n\nimport numpy as np\nS = [\"s1\", \"s2\", \"s3\", \"s4\", \"s5\"]  # 状态集合\nA = [\"保持s1\", \"前往s1\", \"前往s2\", \"前往s3\", \"前往s4\", \"前往s5\", \"概率前往\"]  # 动作集合\n# 状态转移函数\nP = {\n    \"s1-保持s1-s1\": 1.0,\n    \"s1-前往s2-s2\": 1.0,\n    \"s2-前往s1-s1\": 1.0,\n    \"s2-前往s3-s3\": 1.0,\n    \"s3-前往s4-s4\": 1.0,\n    \"s3-前往s5-s5\": 1.0,\n    \"s4-前往s5-s5\": 1.0,\n    \"s4-概率前往-s2\": 0.2,\n    \"s4-概率前往-s3\": 0.4,\n    \"s4-概率前往-s4\": 0.4,\n}\n# 奖励函数\nR = {\n    \"s1-保持s1\": -1,\n    \"s1-前往s2\": 0,\n    \"s2-前往s1\": -1,\n    \"s2-前往s3\": -2,\n    \"s3-前往s4\": -2,\n    \"s3-前往s5\": 0,\n    \"s4-前往s5\": 10,\n    \"s4-概率前往\": 1,\n}\ngamma = 0.5  # 折扣因子\nMDP = (S, A, P, R, gamma)\n\n# 策略1,随机策略\nPi_1 = {\n    \"s1-保持s1\": 0.5,\n    \"s1-前往s2\": 0.5,\n    \"s2-前往s1\": 0.5,\n    \"s2-前往s3\": 0.5,\n    \"s3-前往s4\": 0.5,\n    \"s3-前往s5\": 0.5,\n    \"s4-前往s5\": 0.5,\n    \"s4-概率前往\": 0.5,\n}\n# 策略2\nPi_2 = {\n    \"s1-保持s1\": 0.6,\n    \"s1-前往s2\": 0.4,\n    \"s2-前往s1\": 0.3,\n    \"s2-前往s3\": 0.7,\n    \"s3-前往s4\": 0.5,\n    \"s3-前往s5\": 0.5,\n    \"s4-前往s5\": 0.1,\n    \"s4-概率前往\": 0.9,\n}\n\n\n# 把输入的两个字符串通过“-”连接,便于使用上述定义的P、R变量\ndef join(str1, str2):\n    return str1 + '-' + str2\n\n接下来我们想要计算该MDP下，一个策略\\pi的状态价值函数。我们现有的工具是MRP的解析解方法，一个自然的想法是给定一个MDP和一个策略\\pi,我们是否可以将其转化为一个MRP？答案是肯定的，我们可以将策略的动作选择进行边缘化（Marginalization），就可以得到没有动作的MRP了。具体来说，对于某一个状态，我们根据策略所有动作的概率进行加权，得到的奖励和就可以认为是一个MRP在该状态下的奖励，即： \nr'(s)=\\sum_{a\\in\\mathcal{A}}\\pi(a|s)r(s,a)\n\n同理，我们计算采取动作的概率与使s转移到s'的概率的乘积，再将这些乘积相加，其和就是一个MRP的状态从s转移至s'的概率：\n\nP'(s'|s)=\\sum_{a\\in\\mathcal{A}}\\pi(a|s)\n\n于是，我们构建得到了一个MRP:\\langle \\mathcal{S},P',r',\\gamma\\rangle.根据价值函数的定义可以发现，转化前的 MDP 的状态价值函数和转化后的 MRP 的价值函数是一样的。于是我们可以用 MRP 中计算价值函数的解析解来计算这个 MDP 中该策略的状态价值函数。\n接下来，我们用代码实现该方法，计算用随即策略Pi_1时的状态价值函数，为了简单起见，我们将直接给出转化后的MRP的状态转移矩阵和奖励函数。\n\ngamma = 0.5\n# 转化后的MRP的状态转移矩阵\nP_from_mdp_to_mrp = [\n    [0.5, 0.5, 0.0, 0.0, 0.0],\n    [0.5, 0.0, 0.5, 0.0, 0.0],\n    [0.0, 0.0, 0.0, 0.5, 0.5],\n    [0.0, 0.1, 0.2, 0.2, 0.5],\n    [0.0, 0.0, 0.0, 0.0, 1.0],\n]\nP_from_mdp_to_mrp = np.array(P_from_mdp_to_mrp)\nR_from_mdp_to_mrp = [-0.5, -1.5, -1.0, 5.5, 0]\n\nV = compute(P_from_mdp_to_mrp, R_from_mdp_to_mrp, gamma, 5)\nprint(\"MDP中每个状态价值分别为\\n\", V)\n\nMDP中每个状态价值分别为\n [[-1.22555411]\n [-1.67666232]\n [ 0.51890482]\n [ 6.0756193 ]\n [ 0.        ]]\n\n\n知道了状态价值函数V^{\\pi}(s)后，我们可以计算动作价值函数Q^{\\pi}(s,a).例如(s_4,\\text{概率前往})的动作价值为2.152，根据以下公式可以计算得到：\n\nQ^{\\pi}(s,a)=r(s,a)+\\gamma\\sum_{s'\\in\\mathcal{S}}P(s'|s,a)V^{\\pi}(s')\n\n这个 MRP 解析解的方法在状态动作集合比较大的时候不是很适用，那有没有其他的方法呢？章节 2 将介绍用动态规划算法来计算得到价值函数。章节 1.3 将介绍用蒙特卡洛方法来近似估计这个价值函数，用蒙特卡洛方法的好处在于我们不需要知道 MDP 的状态转移函数和奖励函数，它可以得到一个近似值，并且采样数越多越准确。"
  },
  {
    "objectID": "index.html#sec-mc",
    "href": "index.html#sec-mc",
    "title": "强化学习基础",
    "section": "",
    "text": "蒙特卡洛方法（Monte-Carlo methods）也被称为统计模拟方法，是一种基于概率统计的数值计算方法。运用MC方法时我们通常使用重复随机抽样，然后运用概率统计方法来从抽样结果中归纳出我们想求的目标的数值估计。一个简单的例子是用蒙特卡洛方法来计算圆的面积。例如，在正方形内部随机产生若干个点，细数落在圆中点的个数，圆的面积与正方形面积之比就等于圆中点的个数与正方形中点的个数之比。如果我们随机产生的点的个数越多，计算得到圆的面积就越接近于真实的圆的面积。\n我们现在介绍如何用蒙特卡洛方法来估计一个策略在一个马尔可夫决策过程中的状态价值函数。回忆一下，一个状态的价值是它的期望回报，那么一个很直观的想法就是用策略在 MDP 上采样很多条序列，计算从这个状态出发的回报再求其期望就可以了，公式如下：\n\nV^{\\pi}(s)=\\mathbb{E}_{\\pi}\\left[ G_t|S_t=s \\right]\\approx \\frac{1}{N}\\sum_{i=1}^N G_t^{(i)}\n\n在一条序列中，可能没有出现过这个状态，可能只出现过一次这个状态，也可能出现过很多次这个状态。我们介绍的蒙特卡洛价值估计方法会在该状态每一次出现时计算它的回报。还有一种选择是一条序列只计算一次回报，也就是这条序列第一次出现该状态时计算后面的累积奖励，而后面再次出现该状态时，该状态就被忽略了。假设我们现在用策略\\pi从s开始采样序列，据此来计算状态价值。我们为每一个状态维护一个计数器和总回报，计算状态价值的具体过程如下所示。\n\n使用策略\\pi 采样若干条序列： \ns_0^{(i)}\\overset{a_0^{(i)}}{\\rightarrow} r_0^{(i)},s_1^{(i)}\\overset{a_1^{(i)}}{\\rightarrow} r_1^{(i)},\ns_2^{(i)}\\overset{a_2^{(i)}}{\\rightarrow},...,\\overset{a_{T-1}^{(i)}}{\\rightarrow} r_{T-1}^{(i)},s_T^{(i)}\n\n对每一条序列中的每一时间步t的状态s进行以下操作：\n\n更新状态s的计数器N(s)\\leftarrow N(s)+1;\n更新状态s的总回报M(s)\\leftarrow M(s)+G_t;\n\n每一个状态的价值被估计为回报的平均值V(s)=\\=M(s)/N(s).\n\n根据大数定律，当N(s)\\rightarrow \\infty,有V(s)\\rightarrow V^{\\pi}(s). 计算回报的期望时，除了可以把所有的回报加起来除以次数，还有一种增量更新的方法。对于每个状态s和对应回报G,进行如下计算：\n\nN(s)\\leftarrow N(s)+1\nV(s)\\leftarrow V(s)+\\frac{G-V(s)}{N(s)}\n\n接下来我们用代码定义一个采样函数，采样函数需要遵守状态转移矩阵和相应策略，每次将(s,a,r,s_next)元组放入序列中，直到到达终止序列。然后我们通过该函数，用随即策略在@fig-mdp 的MDP中随机采样几条序列。\n\ndef sample(MDP, Pi, timestep_max, number):\n    ''' 采样函数,策略Pi,限制最长时间步timestep_max,总共采样序列数number '''\n    S, A, P, R, gamma = MDP\n    episodes = []\n    for _ in range(number):\n        episode = []\n        timestep = 0\n        s = S[np.random.randint(4)]  # 随机选择一个除s5以外的状态s作为起点\n        # 当前状态为终止状态或者时间步太长时,一次采样结束\n        while s != \"s5\" and timestep &lt;= timestep_max:\n            timestep += 1\n            rand, temp = np.random.rand(), 0\n            # 在状态s下根据策略选择动作\n            for a_opt in A:\n                temp += Pi.get(join(s, a_opt), 0)\n                if temp &gt; rand:\n                    a = a_opt\n                    r = R.get(join(s, a), 0)\n                    break\n            rand, temp = np.random.rand(), 0\n            # 根据状态转移概率得到下一个状态s_next\n            for s_opt in S:\n                temp += P.get(join(join(s, a), s_opt), 0)\n                if temp &gt; rand:\n                    s_next = s_opt\n                    break\n            episode.append((s, a, r, s_next))  # 把（s,a,r,s_next）元组放入序列中\n            s = s_next  # s_next变成当前状态,开始接下来的循环\n        episodes.append(episode)\n    return episodes\n\n\n# 采样5次,每个序列最长不超过20步\nepisodes = sample(MDP, Pi_1, 20, 5)\nprint('第一条序列\\n', episodes[0])\nprint('第二条序列\\n', episodes[1])\nprint('第五条序列\\n', episodes[4])\n\n第一条序列\n [('s1', '保持s1', -1, 's1'), ('s1', '保持s1', -1, 's1'), ('s1', '保持s1', -1, 's1'), ('s1', '保持s1', -1, 's1'), ('s1', '前往s2', 0, 's2'), ('s2', '前往s3', -2, 's3'), ('s3', '前往s4', -2, 's4'), ('s4', '前往s5', 10, 's5')]\n第二条序列\n [('s2', '前往s1', -1, 's1'), ('s1', '前往s2', 0, 's2'), ('s2', '前往s1', -1, 's1'), ('s1', '前往s2', 0, 's2'), ('s2', '前往s1', -1, 's1'), ('s1', '前往s2', 0, 's2'), ('s2', '前往s1', -1, 's1'), ('s1', '前往s2', 0, 's2'), ('s2', '前往s3', -2, 's3'), ('s3', '前往s5', 0, 's5')]\n第五条序列\n [('s4', '前往s5', 10, 's5')]\n\n\n\n# 对所有采样序列计算所有状态的价值\ndef MC(episodes, V, N, gamma):\n    for episode in episodes:\n        G = 0\n        for i in range(len(episode) - 1, -1, -1):  #一个序列从后往前计算\n            (s, a, r, s_next) = episode[i]\n            G = r + gamma * G\n            N[s] = N[s] + 1\n            V[s] = V[s] + (G - V[s]) / N[s]\n\n\ntimestep_max = 20\n# 采样1000次,可以自行修改\nepisodes = sample(MDP, Pi_1, timestep_max, 1000)\ngamma = 0.5\nV = {\"s1\": 0, \"s2\": 0, \"s3\": 0, \"s4\": 0, \"s5\": 0}\nN = {\"s1\": 0, \"s2\": 0, \"s3\": 0, \"s4\": 0, \"s5\": 0}\nMC(episodes, V, N, gamma)\nprint(\"使用蒙特卡洛方法计算MDP的状态价值为\\n\", V)\n\n使用蒙特卡洛方法计算MDP的状态价值为\n {'s1': -1.2275505036753624, 's2': -1.7044112135923994, 's3': 0.46556681493049196, 's4': 5.958254588438255, 's5': 0}\n\n\n可以看到用蒙特卡洛方法估计得到的状态价值和我们用 MRP 解析解得到的状态价值是很接近的。这得益于我们采样了比较多的序列，感兴趣的读者可以尝试修改采样次数，然后观察蒙特卡洛方法的结果。"
  },
  {
    "objectID": "index.html#最优策略",
    "href": "index.html#最优策略",
    "title": "强化学习基础",
    "section": "",
    "text": "强化学习的目标通常是找到一个策略，使得智能体从初始状态出发能获得最多的期望回报。我们首先定义策略之间的偏序关系：当且仅当对于任意状态s都有V^{\\pi}(s)&gt; V^{\\pi'}(s), 记\\pi&gt;\\pi'. 于是在有限状态和动作集合的MDP中至少存在一个策略比其他所有策略都好或者至少存在一个策略不差于其他所有策略，这个策略就是最优策略（Optimal policy）。最优策略可能有很多个，我们都将其表示为\\pi^*(s).\n最优策略都有相同的状态价值函数，我们称之为最有状态价值函数，表示为： \nV^*(s)=\\max_{\\pi} V^{\\pi}(s),\\forall s\\in\\mathcal{S}\n\n同理我们定义最优动作价值函数： \nQ^*(s,a)=\\max_{\\pi}Q^{\\pi}(s,a),\\forall s\\in\\mathcal{S},a\\in\\mathcal{A}\n\n为了使Q^*(s,a)最大，我们需要在当前状态动作对(s,a)之后都执行最优策略，于是我们得到了最有状态价值函数和最优动作价值函数之间的关系：\n\nQ^\\pi{s,a}=r(s,a)+\\gamma\\sum_{s\\in\\mathcal{S}}P(s'|s,a)V^*(s')\n\n这与在普通策略下的状态价值函数和动作价值函数之间的关系是一样的。另一方面，最优状态价值是选择此时使最优动作价值最大的那一个动作时的状态价值： \nV^*(s)=\\max_{a\\in\\mathcal{A}}Q^*(s,a)\n\n\n\n根据V^*(s)和Q^*(s,a)的关系，我们可以得到贝尔曼最优方程（Bellman optimality equation）：\n\n\\begin{aligned}\nV^*(s)&=\\max_{a\\in\\mathcal{A}}\\left\\{ r(s,a)+\\gamma\\sum_{s'\\in\\mathcal{S}}p(s'|s,a)V^*(s')\\right\\}\\\\\nQ^*(s,a)=r(s,a)+\\gamma\\sum_{s'\\in \\mathcal{S}}p(s'|s,a)\\max_{a'\\in\\mathcal{A}}Q^*(s',a')\n\\end{aligned}\n\n章节 2 将介绍如何用动态规划算法得到最优策略。"
  },
  {
    "objectID": "index.html#总结",
    "href": "index.html#总结",
    "title": "强化学习基础",
    "section": "",
    "text": "马尔可夫决策过程是强化学习中的基础概念，强化学习中的环境就是一个马尔可夫决策过程。我们接下来将要介绍的强化学习算法通常都是在求解马尔可夫决策过程中的最优策略。"
  },
  {
    "objectID": "index.html#简介",
    "href": "index.html#简介",
    "title": "强化学习基础",
    "section": "3.1 简介",
    "text": "3.1 简介\n章节 2 介绍的动态规划算法要求马尔可夫决策过程是已知的，即要求与智能体交互的环境是完全已知的（例如迷宫或者给定规则的网格世界）。在此条件下，智能体其实并不需要和环境真正交互来采样数据，直接用动态规划算法就可以解出最优价值或策略。这就好比对于有监督学习任务，如果直接显式给出了数据的分布公式，那么也可以通过在期望层面上直接最小化模型的泛化误差来更新模型参数，并不需要采样任何数据点。\n但这在大部分场景下并不现实，机器学习的主要方法都是在数据分布未知的情况下针对具体的数据点来对模型做出更新的。对于大部分强化学习现实场景（例如电子游戏或者一些复杂物理环境），其马尔可夫决策过程的状态转移概率是无法写出来的，也就无法直接进行动态规划。在这种情况下，智能体只能和环境进行交互，通过采样到的数据来学习，这类学习方法统称为无模型的强化学习（model-free reinforcement learning）。\n不同于动态规划算法，无模型的强化学习算法不需要事先知道环境的奖励函数和状态转移函数，而是直接使用和环境交互的过程中采样到的数据来学习，这使得它可以被应用到一些简单的实际场景中。本章将要讲解无模型的强化学习中的两大经典算法：Sarsa 和 Q-learning，它们都是基于时序差分（temporal difference，TD）的强化学习算法。同时，本章还会引入一组概念：在线策略学习和离线策略学习。通常来说，在线策略学习要求使用在当前策略下采样得到的样本进行学习，一旦策略被更新，当前的样本就被放弃了，就好像在水龙头下用自来水洗手；而离线策略学习使用经验回放池将之前采样得到的样本收集起来再次利用，就好像使用脸盆接水后洗手。因此，离线策略学习往往能够更好地利用历史数据，并具有更小的样本复杂度（算法达到收敛结果需要在环境中采样的样本数量），这使其被更广泛地应用。"
  },
  {
    "objectID": "index.html#时序差分方法",
    "href": "index.html#时序差分方法",
    "title": "强化学习基础",
    "section": "3.2 时序差分方法",
    "text": "3.2 时序差分方法\n时序差分是一种用来估计一个策略的价值函数的方法，它结合了蒙特卡洛和动态规划算法的思想。时序差分方法和蒙特卡洛的相似之处在于可以从样本数据中学习，不需要事先知道环境；和动态规划的相似之处在于根据贝尔曼方程的思想，利用后续状态的价值估计来更新当前状态的价值估计。回顾一下蒙特卡洛方法对价值函数的增量更新方式：\n\nV(s_t)\\leftarrow V(s_t)+\\alpha\\left[ G_t-V(s_t) \\right]\n\n这里我们将@sec-mc 中的\\frac{1}{N(s)}替换成了\\alpha,表示对价值估计更新的步长。可以将\\alpha取为一个常数，此时更新方式不再像MC方法那样严格取期望。MC方法必须要等整个序列结束之后才能计算得到这一次的回报G_t,而时序差分方法只需要当前步结束即可计算。具体来说，时序差分算法用当前获得的奖励加上下一个状态的价值估计来作为在当前状态会获得的回报，即：\n\nV(s_t)\\leftarrow V(s_t)+\\alpha\\left[ R_t+\\gamma V(s_{t+1})-V(s_t) \\right]\n 其中R_t+\\gamma V(s_{t+1})-V(s_t)通常被称为时序差分误差。时序差分算法将其与步长的乘积作为状态价值的更新量。可以用R_t+\\gamma V(s_{t+1})来代替G_t的原因是： \n\\begin{aligned}\nV^{\\pi}(s)&=\\mathbb{E}_{\\pi}\\left[ G_t|S_t=s \\right]\\\\\n&=\\mathbb{E}_\\pi\\left[ \\sum_{k=0}^{\\infty}\\gamma^k R_{t+k}|S_t=s \\right]\\\\\n&=\\mathbb{E}_{\\pi}\\left[ R_t+\\gamma\\sum_{k=0}^{\\infty}\\gamma^kR_{t+k+1}| S_t=s \\right]\\\\\n&=\\mathbb{E}_{\\pi}\\left[ R_t+\\gamma V^{\\pi}(s_{t+1})| S_t=s \\right]\n\\end{aligned}\n\n因此MC方法将上式第一行作为更新的目标而TD算法将上式最后一行作为更新的目标。于是，再用策略和环境交互时，每采样一步，我们就可以用时序差分算法来更新状态价值估计。时序差分算法用到了V(s_{t+1})的估计值，可以证明它最终收敛到策略\\pi的价值函数，我们在这里不对此进行展开说明。"
  },
  {
    "objectID": "index.html#sarsa算法",
    "href": "index.html#sarsa算法",
    "title": "强化学习基础",
    "section": "3.3 Sarsa算法",
    "text": "3.3 Sarsa算法\n既然我们可以用时序差分方法来估计价值函数，那一个很自然的问题是，我们能否用类似策略迭代的方法来进行强化学习。策略评估已经可以通过时序差分算法实现，那么在不知道奖励函数和状态转移函数的情况下该怎么进行策略提升呢？答案是可以直接用时序差分算法来估计动作价值函数Q:\n\nQ(s_t,a_t)\\leftarrow Q(s_t,a_t)+\\alpha\\left[ R_t+\\gamma Q(s_{t+1},a_{t+1})-Q(s_t,a_t) \\right]\n 然后我们用贪婪算法来选取在某个状态下动作价值最大的那个动作，即\\arg\\max_{a}Q(s,a). 这样似乎已经形成了一个完整的强化学习算法： 用贪婪算法根据动作价值选取动作来和环境交互，再根据得到的数据用时序差分算法更新动作价值估计。\n然而这个简单的算法存在两个需要进一步考虑的问题。第一，如果要用时序差分算法来准确地估计策略的状态价值函数，我们需要用极大量的样本来进行更新。但实际上我们可以忽略这一点，直接用一些样本来评估策略，然后就可以更新策略了。我们可以这么做的原因是策略提升可以在策略评估未完全进行的情况进行；第二，如果在策略提升中一直根据贪婪算法得到一个确定性策略，可能会导致某些状态动作对(s,a)永远没有在序列中出现以至于无法对其动作价值进行估计，进而无法保证策略提升后的策略比之前的好。\n简单常用的解决方案是不再一味使用贪婪算法，而是采用\\epsilon-贪婪策略：有1-\\epsilon的概率采用动作价值最大的那个动作（贪婪），另外有\\epsilon的概率从动作空间中随机选取一个动作（探索），其公式表示为：\n\n\\pi(a|s)=\n\\begin{cases}\n\\frac{\\epsilon}{|\\mathcal{A}|}+1-\\epsilon &\\text{如果}a=\\arg\\max_{a'}Q(s,a')\\\\\n\\frac{\\epsilon}{|\\mathcal{A}|}& 其他动作\n\\end{cases}\n\n现在，我们就可以得到一个实际的基于时序差分方法的强化学习算法。这个算法被称为 Sarsa，因为它的动作价值更新用到了当前状态s、当前动作a、获得的奖励r、下一个状态s'和下一个动作a',将这些符号拼接后就得到了算法名称，这是一种On-Policy(同策略，a_{t+1}和a_t来自于同一策略)的时序差分强化学习算法。Sarsa的具体算法如下："
  }
]